name: 'dotnet restore'
description: 'dotnet restore'
inputs:
  path:  
    description: 'path'
    required: true
  test_path:  
    description: 'test-path'
    required: false
  newTag:  
    description: 'newTag'
    required: false
  file_extenstion:
    description: "file extension"
    required: true
  temp_path:  
    description: 'temp_path'
    required: false
  build_configuration:
    description: "build configuration"
    required: false
  test_depth:
    description: "test_depth"
    required: false
  dotnet_action:
    description: "available actions: restore, build, test, publish"
    required: true
  dotnet_web_publish:
    description: "publish web application or not"
    required: false
    default: 'true'
  runtime:
    description: "specifiy runtime os"
    required: false
    default: 'windows'
  self_contained:
    description: "self_contained"
    required: false
    default: 'false'
outputs:
  random-number:
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-number }}
runs:
  using: "composite"
  steps:
    - run: |
        cd "${{ inputs.path }}"
        Get-ChildItem -Path .\ -Filter ${{ inputs.file_extenstion }} -Depth 1 -Recurse -File -Name| ForEach-Object {            
            dotnet restore $_
        }
      shell: powershell
      if: ${{ inputs.dotnet_action == 'restore' }}
    - run: |
        cd "${{ inputs.path }}"
        Get-ChildItem -Path .\ -Filter ${{ inputs.file_extenstion }} -Depth 1 -Recurse -File -Name| ForEach-Object {            
            dotnet build $_ --configuration ${{ inputs.build_configuration }} 
        }
      shell: powershell
      if: ${{ inputs.dotnet_action == 'build' }}
    - run: |
        cd "${{ inputs.path }}"
        if(!(test-path "${{ inputs.temp_path }}")) {
          mkdir "${{ inputs.temp_path }}"
        }
        Get-ChildItem -Path ".\${{ inputs.test_path }}" -Filter ${{ inputs.file_extenstion }} -Depth ${{ inputs.test_depth }} -Recurse -File -Name| ForEach-Object {            
            dotnet test $_ --logger trx --results-directory "${{ inputs.temp_path }}" --configuration ${{ inputs.build_configuration }}
        }
      shell: powershell
      if: ${{ inputs.dotnet_action == 'test' }}
    - run: |
        cd "${{ inputs.path }}"
        if(!(test-path "${{ inputs.temp_path }}")) {
          mkdir "${{ inputs.temp_path }}"
        }

        
        
        Get-ChildItem -Path .\  -Recurse -Depth 1 -Filter "wwwroot" -Directory  -Name |  ForEach-Object {
            cd $_
            cd ../
            pwd
            # $pt =  (get-item $_ ).parent.FullName
            # cd $pt
            $NAME= (get-item "${{ inputs.file_extenstion }}")
            echo --- NAME ---
            echo $NAME
            # if((test-path -Path ".\$NAME")) {
              dotnet publish $NAME --configuration "${{ inputs.build_configuration }}" --output "${{ inputs.temp_path }}" /property:Version="${{ inputs.newTag }}"
            # }

            # echo "${{ inputs.path }}"
            # echo ----
            # echo "$pt"
            # cd "$pt"
            # Get-ChildItem -Path .\  -Filter "${{ inputs.file_extenstion }}" -File  -Name |  ForEach-Object {
            #     dotnet publish $_ --configuration "${{ inputs.build_configuration }}" --output "${{ inputs.temp_path }}" /property:Version="${{ inputs.newTag }}"
            # }
        }
      shell: powershell
      if: ${{ inputs.dotnet_action == 'publish' && inputs.dotnet_web_publish == 'true'}}
    - run: |
        cd "${{ inputs.path }}"
        if(!(test-path "${{ inputs.temp_path }}")) {
          mkdir "${{ inputs.temp_path }}"
        }       
        
        
        Get-ChildItem -Path .\ -Recurse -Filter "${{ inputs.file_extenstion }}"  -Depth 1 -File  -Name |  ForEach-Object {
            echo "----"
            echo $_
            echo "${{ inputs.newTag }}"
            echo "dotnet publish $_ --configuration '${{ inputs.build_configuration }}' --output '${{ inputs.temp_path }}' /property:Version='${{ inputs.newTag }}'"
            dotnet publish $_ --configuration "${{ inputs.build_configuration }}" --output "${{ inputs.temp_path }}" /property:Version="${{ inputs.newTag }}"
        }        
      shell: powershell
      if: ${{ inputs.dotnet_action == 'publish' && inputs.dotnet_web_publish != 'true'}}
    - run: |
        cd "${{ inputs.path }}"
        if(!(test-path "${{ inputs.temp_path }}")) {
          mkdir "${{ inputs.temp_path }}"
        }       
        
        
        Get-ChildItem -Path .\ -Recurse -Filter "${{ inputs.file_extenstion }}"  -Depth 1 -File  -Name |  ForEach-Object {
            echo "----"
            echo $_
            echo "${{ inputs.newTag }}"
            echo "dotnet publish $_ --configuration '${{ inputs.build_configuration }}' --output '${{ inputs.temp_path }}' /property:Version='${{ inputs.newTag }}'"
            dotnet publish $_ --configuration "${{ inputs.build_configuration }}" --output "${{ inputs.temp_path }}" /property:Version="${{ inputs.newTag }}" --runtime "${{ inputs.runtime }}" --self-contained "${{ inputs.self_contained }}"
        }        
      shell: powershell
      if: ${{ inputs.dotnet_action == 'publish' && inputs.dotnet_web_publish != 'true' && inputs.runtime != 'windows' }}
